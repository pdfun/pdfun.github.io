<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pdx</title><link href="http://pdhero.com/" rel="alternate"></link><link href="http://pdhero.com/feeds/pdx.atom.xml" rel="self"></link><id>http://pdhero.com/</id><updated>2016-01-05T17:31:08+08:00</updated><entry><title>Unity3d.Cocos2dx.Flash游戏接入iOS SDK</title><link href="http://pdhero.com/bnote/Unity3d-Cocos2dx-Flash-Game-Connect-iOS-SDK.html" rel="alternate"></link><updated>2016-01-05T17:31:08+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2016-01-05:bnote/Unity3d-Cocos2dx-Flash-Game-Connect-iOS-SDK.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;各种不同引擎的游戏接入&lt;code&gt;iOS SDK&lt;/code&gt;大致的解决方案.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="1def5b505372521fd984197e91241665"&gt;Unity3d&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Unity能直接调用C的方法。首先把SDK相关的方法转换成C方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;#if defined (__cplusplus)
extern &amp;quot;C&amp;quot;
{
#endif

    void sdkInit()
    {
        //这里直接调用SDK的相关方法进行初始化
    }

#if defined (__cplusplus)
}
#endif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;转换后的文件(.h/.mm)可以通过Unity插件的方式导入，也可以在Unity导出的Xcode后再加到工程文件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SDK回调处理。如果熟悉OC语法的话直接处理，在对应的回调里进行相关操作就行了。不熟悉可以在接收到回调的时候用&lt;code&gt;UnitySendMessage&lt;/code&gt;向Unity发送通知消息,Unity接收到消息后再进行相应的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="7feef1be1715e7fdb72dd707d83b686b"&gt;Cocos2dx&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;加入SDK相关文件后。可以在SDK相关的回调里直接调用C++的方法。
导入 cocos2dx头文件，使用&lt;code&gt;CCNotificationCenter&lt;/code&gt;与&lt;code&gt;Scene&lt;/code&gt;交互&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SDK发送通知&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;#include &amp;quot;cocos2d.h&amp;quot;

const char * ccParamToken = [paramToken UTF8String];
    cocos2d::CCString *str = cocos2d::CCString::create(ccParamToken);
    cocos2d::CCNotificationCenter::sharedNotificationCenter()-&amp;gt;postNotification(&amp;quot;TOKEN&amp;quot;, dynamic_cast&amp;lt;cocos2d::CCObject *&amp;gt;(str));
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Cocos2dx接收通知&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;    CCNotificationCenter::sharedNotificationCenter()-&amp;gt;addObserver(this, callfuncO_selector(HelloWorld::sdkNotification),&amp;quot;TOKEN&amp;quot;, NULL);
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="126127548010f1ccf3c314bc7463041a"&gt;Cocos2dx-js&lt;/h1&gt;
&lt;p&gt;待续。。。&lt;/p&gt;
&lt;h1 id="d1211e4ea9689c600a71c4a36f828216"&gt;Cocos2dx-lua&lt;/h1&gt;
&lt;p&gt;有这两篇文章足够了。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不忘初"辛&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.cnblogs.com/flyFreeZn/p/4152881.html"&gt;http://www.cnblogs.com/flyFreeZn/p/4152881.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这篇文件介绍了下OC与lua如何实现交互，涉及&lt;code&gt;Lua,C++,Objective-C&lt;/code&gt;三种语言。Lua调用Lua Binding的C++接口，C++接口调用混编的Objective-C接口，而Objective-C通过block形式的回调，将结果通知给C++，C++通过Lua的C API将最终结果返回给Lua。。。。。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我是妖怪&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://dualface.github.io/blog/2013/01/27/call-objectivec-from-lua/"&gt;http://dualface.github.io/blog/2013/01/27/call-objectivec-from-lua/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CCLuaObjcBridge&lt;/code&gt;堪称&lt;code&gt;cocos2d-x Lua&lt;/code&gt;游戏开发的神器 ^_^(作者原话)）。&lt;code&gt;CCLuaObjcBridge&lt;/code&gt; 已经集成到&lt;a href="https://github.com/chukong/quick-cocos2d-x"&gt;quick-cocos2d-x&lt;/a&gt;中，从&lt;code&gt;Objective-C&lt;/code&gt; 调用 &lt;code&gt;Lua&lt;/code&gt; 也非常简单灵活。&lt;/p&gt;
&lt;h1 id="bf2c44e6fc09515648b91b1bb4ec3f5f"&gt;Flash&lt;/h1&gt;
&lt;p&gt;待续。。。&lt;/p&gt;</summary><category term="iOS SDK Integration"></category></entry><entry><title>vim notes</title><link href="http://pdhero.com/bnote/vim-notes.html" rel="alternate"></link><updated>2015-12-30T16:26:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-12-30:bnote/vim-notes.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;记下常用的一些VIM快捷键&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;平时用Xcode和Sublime比较多。Xcode使用插件&lt;a href="https://github.com/XVimProject/XVim"&gt;xvim&lt;/a&gt;,sublime直接改下配置文件就有&lt;code&gt;vim&lt;/code&gt;模式了.&lt;/p&gt;
&lt;h1 id="7653297de32f34fdec0dd0653aebf358"&gt;跳转&lt;/h1&gt;
&lt;p&gt;跳转到指定行: 行号+gg,比如:100gg跳转到第100行.&lt;br /&gt;
跳转到最后一行:shift+g.&lt;br /&gt;
跳转到第一行:g.&lt;br /&gt;
跳转到行尾:$(shift+4).&lt;br /&gt;
跳转到行首:^(shift+6).&lt;br /&gt;
跳转某个字母:ta跳转到下一个a前面,fa跳转到下一个a(小写的向前,大写的向后).&lt;br /&gt;
跳转到单词:w向前跳转到下一个单词,b向后跳转到下一个单词,e跳转到单词的结束.&lt;br /&gt;
函数体跳转:{}  &lt;/p&gt;
&lt;h1 id="79d3abe929f67f0644a78bf32adb3a89"&gt;复制&lt;/h1&gt;
&lt;p&gt;复制整行:yy&lt;br /&gt;
复制一个单词:yw&lt;br /&gt;
复制到文档尾:yG  &lt;/p&gt;
&lt;h1 id="2f4aaddde33c9b93c36fd2503f3d122b"&gt;删除&lt;/h1&gt;
&lt;p&gt;删除也可以叫剪切,删除时会复制选定内容到缓冲区.&lt;br /&gt;
删除整行:dd&lt;br /&gt;
删除某个单词:dw  &lt;/p&gt;
&lt;h1 id="eafbece1016a6af76cce466e55ad9f00"&gt;粘贴&lt;/h1&gt;
&lt;p&gt;p&lt;/p&gt;
&lt;h1 id="fad7c8a21fe3d7b3eb1db3d8a3212503"&gt;选中&lt;/h1&gt;
&lt;p&gt;先v再移动到相应位置进行选中&lt;br /&gt;
选中某个单词:viw或者vaw&lt;br /&gt;
选中当前行:V  &lt;/p&gt;
&lt;h1 id="1d95b75b8b084e242293bf54ff992010"&gt;大小写&lt;/h1&gt;
&lt;p&gt;大小写转换前先选中&lt;br /&gt;
u:当前选中的小写&lt;br /&gt;
U:当前选的大写&lt;br /&gt;
某个单词大写:先选中 viw 再gU  &lt;/p&gt;
&lt;h1 id="632ca845b6775b8a63991380886b25cb"&gt;组合应用&lt;/h1&gt;
&lt;h2 id="d85d743375b003f034e69da688867837"&gt;多行注释&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ctrl+v  &lt;/li&gt;
&lt;li&gt;方向键j or k选中多行  &lt;/li&gt;
&lt;li&gt;大写I  &lt;/li&gt;
&lt;li&gt;插入注释符,比如//  &lt;/li&gt;
&lt;li&gt;esc  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="f487d1ec492bbf209340222c0608ee56"&gt;取消多行注释&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;ctrl+v  &lt;/li&gt;
&lt;li&gt;l向选中,比如://要选中2列&lt;/li&gt;
&lt;li&gt;j or k&lt;/li&gt;
&lt;li&gt;d&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="dc5d07a1867b1c0b57153afe054d0332"&gt;查找&lt;/h1&gt;
&lt;p&gt;/ 向前查找&lt;br /&gt;
? 向后查找&lt;br /&gt;
比如:/xx回车 从当前位置向后查找xx&lt;br /&gt;
n继续查找 N反向查找  &lt;/p&gt;
&lt;h1 id="25f9c7fa3b50aebe5125112ac1187777"&gt;总结&lt;/h1&gt;
&lt;p&gt;其实记住 &lt;code&gt;gydpuvwb&lt;/code&gt; 这些基本的就行了.用久了组合什么的稍微想下就知道了.&lt;br /&gt;
当然了我也只是说说而已😂&lt;br /&gt;
想把这些经常用　组合成个单词,搜索了大脑词量太小了。  &lt;/p&gt;</summary><category term="vim"></category></entry><entry><title>Swift</title><link href="http://pdhero.com/bnote/Swift-notes.html" rel="alternate"></link><updated>2015-12-25T10:20:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-12-25:bnote/Swift-notes.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Swift才出来的时候看过一遍,忘记了。记下笔记加深印象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="ddc7d28b7b108cdca9ee7832f7314422"&gt;变量&lt;/h1&gt;
&lt;p&gt;let 定义一个常量 var 定义一个变量  可以不声明变量类型 变量名可用Unicode字符&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;let f = 70
let f1: Float = 70
let 🐶 = &amp;quot;加班狗&amp;quot;
var s: String = &amp;quot;string&amp;quot;
var red, green, bule: Double
let `int` = &amp;quot;abc&amp;quot;
print(&amp;quot;Swift \(🐶)&amp;quot;)
print(f, f1, separator: &amp;quot;====&amp;quot;, terminator: &amp;quot;\n&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;Notes&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;常量与变更名不能包含数学符号,箭头,保留的(或非法的)Unicode字符,-与制表符。
也不能以数字开头,但可以在常量与变量的其他地方包含数字&lt;/li&gt;
&lt;li&gt;一量将常量或变量声明为确定的类型,就不能使用相同的名字再次声明,或者改变其存储值的类型。
同时也不能将常量与变量进行互转&lt;/li&gt;
&lt;li&gt;避免使用关键字来定义变量,一定要使用的时候用 ` 将关键字包围&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="3787f6af617176a3f498bc4105c7289e"&gt;基本数据类型&lt;/h1&gt;
&lt;h2 id="87cd879720b68e51d8b03b7e29630ecf"&gt;整型&lt;/h2&gt;
&lt;p&gt;与C相似,Swift的提供了8,16,32,64位的有符号和无符号整型。（UInt8...）
一般来说无需特别指定.用Int就好,32位平台Int和Int32长度相同;64位平台Int和Int64长度相同.
&lt;code&gt;Int.min Int.max&lt;/code&gt;分别取最大值和最小值.&lt;/p&gt;
&lt;h2 id="db491dc61a030ff6b50ac39c4d8bc06e"&gt;浮点型&lt;/h2&gt;
&lt;p&gt;与OC一样,swfit提供了两种&lt;code&gt;Float&lt;/code&gt; &lt;code&gt;Double&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="51c4a47321d555f07442c0e6ea9b934e"&gt;类型别名&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;typealias&lt;/code&gt;关键字    相当于OC的&lt;code&gt;typedef&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="97b0b6499334ed889b372513290a2a52"&gt;布尔&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;终于不是 &lt;code&gt;YES or NO&lt;/code&gt;了&lt;/p&gt;
&lt;h2 id="cda9f200088a3396902af2d4b5efb290"&gt;元组&lt;/h2&gt;
&lt;p&gt;元组把多个值组合在一起,每一个值可以是不同的数据类型.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;let http404Error = (404,&amp;quot;Not Found&amp;quot;)
类型为(Int,String)的元组
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="codehilite"&gt;&lt;pre&gt;let (statuCode, error) = http404Error
print(statuCode,error)
将元组内容分解成单独的的常量和变量

let (statuCode,_) = http404Error
print(statuCode,error)
分解的时候忽略的部分用_标记

print(http404Error.0, http404Error.1)
可以通过下标来访问

let http200 = (code:200, des:true)
print(http200.code, http200.des)
定义元组的时候给元素命名,可以通过名字来取值
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="4fa4f39154d3fc1624099c34182adbfb"&gt;可选类型&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;optionals&lt;/code&gt;来处理可能缺失的情况,可选类型来表示:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有值,等于x
或者&lt;/li&gt;
&lt;li&gt;没有值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Int?&lt;/code&gt; or &lt;code&gt;optional Int&lt;/code&gt;&lt;/p&gt;
&lt;h3 id="852438d026c018c4307b916406f98c62"&gt;nil&lt;/h3&gt;
&lt;p&gt;可以给可选变量赋值为nil来表示它没有值。nil不能用于非可选的常量和变量,如果要处理缺失情况,应该声明成对应的可选类型.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;OC中nil指向不存在的对象的指针。Swift中nil不是指针它是一个确定的值,用来表示缺失,任何类型的可选状态都可以设置为nil。
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="52281bbb55b775e6238b4faea2763f78"&gt;可选值的强制解析&lt;/h3&gt;
&lt;p&gt;当确定可选类型确实包含值之后,可以在可选的名字后面加一个感叹号来取值&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;if convertNumber != nil{

    print(&amp;quot;(converNumber!)&amp;quot;)

}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;使用&lt;code&gt;!&lt;/code&gt;获取一个不存在可选值会导致运行时的错误。使用&lt;code&gt;!&lt;/code&gt;来强制解析之前,一定要确定可选包含一个非&lt;code&gt;nil&lt;/code&gt;的值。&lt;/p&gt;
&lt;h3 id="362a5bcaae88747d270aedbe592dd7aa"&gt;可选绑定&lt;/h3&gt;
&lt;p&gt;使用可选绑定来判断可选类型是否包含值,如果包含值就把值赋给一个临时常量或变量。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;if let actualNumber = Int(possbileNumber){
    print(actualNumber)
}else{
    print(&amp;quot;not integer&amp;quot;)
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="871961bb53c7d430a1be996622d506e5"&gt;隐式解析可选类型&lt;/h3&gt;
&lt;p&gt;隐式解析可选其实就是一个普通的可选类型(可自动解析的可选类型)，但是可以被当做非可选类型来用，不需要每次都使用解析来获取值。
把想要用作可选的类型后面的问号改成感叹号来来声明一个隐式解析可选类型。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果在隐式解析可选类型中没有值的时候尝试取值,一样会触发运行时错误。
如果一个变量之后可能变成nil请不要使用隐式解析可选。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id="9cdd4a789b02863f4444c0f68b42d3e3"&gt;运算符&lt;/h1&gt;
&lt;p&gt;很多地方和大部分语言是相同的。只记下不同的地方。&lt;/p&gt;
&lt;h2 id="dac6cd239b9a9c4cd71fb3d5e2d3fb49"&gt;赋值运算符&lt;/h2&gt;
&lt;p&gt;Swift的赋值运算符不返回任何值。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;if(x = 1){

    //此句错误。再也不用担心 ==写成=了。

}
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="20805b4c0d2cc79d9e7ff7d09649a390"&gt;算术运算符&lt;/h2&gt;
&lt;p&gt;Swift默认情况下不允许出现溢出情况。但可以使用Swift的溢出运算符来实现溢出运算。如(a &amp;amp;+ b)
可用+号来拼接字符串这点与python很像。&lt;/p&gt;
&lt;h2 id="f2e73f2c3fc03cacc6bdddeeb584eddc"&gt;求余运算符&lt;/h2&gt;
&lt;p&gt;Swift是可以对浮点数进行求余的。&lt;/p&gt;
&lt;h2 id="7e1c49378c9ef74fe43f6361b0e1a21e"&gt;空合运算符&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;a ?? b&lt;/code&gt;
&lt;em&gt; a必须是Optional类型
&lt;/em&gt; 默认值b类型必须要和a存储值类型保持一致&lt;/p&gt;
&lt;p&gt;相当于 &lt;code&gt;a != nil ? a! : b&lt;/code&gt;&lt;/p&gt;
&lt;h2 id="0b9e4c50c1cc94af08df81e22c2f0fd9"&gt;区间运算符&lt;/h2&gt;
&lt;h3 id="737996fad0e733e457a8fe8f0c72004d"&gt;闭区间运算符&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;a...b&lt;/code&gt; 定义一个从a到b(包含a和b)的所有值区间,b必须大于等于a.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;for index in 1...5{

    print(index)

}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="3df0c47cdc0607e68b466869840f15c4"&gt;半开区间运算符&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;a..&amp;lt;b&lt;/code&gt; 定义一个从a到b但不包括b的区间,称为半区间是因为包含第一个值不包含最后一个值.
数组的时候用。&lt;/p&gt;
&lt;h1 id="cc4dd1da7e1a754534215f02fb9ba85d"&gt;字符串&lt;/h1&gt;
&lt;h2 id="a6b363bb757dc13cece66cf23648b8cf"&gt;拼接&lt;/h2&gt;
&lt;p&gt;直接使用加号&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;print(&amp;quot;今天星期四&amp;quot;+&amp;quot;明天元旦放假啊&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="706a31e5f14203120576352d0cf8bf97"&gt;字符串插值&lt;/h2&gt;
&lt;p&gt;换句话说就是格式化字符串。个人理解是使用&lt;code&gt;\()&lt;/code&gt;来占位替换.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;let tucao = &amp;quot;车牌又要到3W了&amp;quot;
print(&amp;quot;\(tucao)。要不要离开这个鬼地方&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;插值字符串写在括号中的表达式不能包含非转义反斜线&lt;code&gt;\&lt;/code&gt;,并且不能包含回车或换行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="c6009d4f6a2226b5376028d5f296bae5"&gt;字符数量&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&amp;quot;数量&amp;quot;.characters.count
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在Swift 中，使用可拓展的字符群集作为Character值来连接或改变字符串时，并不一定会更改字符串的字符数量。&lt;/p&gt;
&lt;p&gt;NSString的length和characters.count返回的长度可能不一样。这个得小心了。感觉很复杂。#-_-&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;var word = &amp;quot;cafe&amp;quot;
print(&amp;quot;the number of characters in \(word) is \(word.characters.count)&amp;quot;)
word += &amp;quot;\u{301}&amp;quot;
print(&amp;quot;the number of characters in \(word) is \(word.characters.count)&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="83f6fff6219e3d2e7f7e857b7d611c24"&gt;访问和修改字符串&lt;/h2&gt;
&lt;h3 id="b271e427962758c71e342a2c06df493a"&gt;索引&lt;/h3&gt;
&lt;p&gt;Swift的字符串不能用整数做索引。"字符串"[0]会报错&lt;br /&gt;
&lt;code&gt;startIndex&lt;/code&gt;属性区取字符串第一个字符的索引。&lt;br /&gt;
&lt;code&gt;endIndex&lt;/code&gt;属性获取最后一个字符的后面一个位置的索引.&lt;br /&gt;
(&lt;code&gt;endIndex&lt;/code&gt;不能做为一个字符串有的有效下标会越界)。 &lt;br /&gt;
&lt;code&gt;index.predecessor()&lt;/code&gt;得到index的前一个索引。&lt;br /&gt;
&lt;code&gt;index.successor()&lt;/code&gt;得到index后一个索引。&lt;br /&gt;
&lt;code&gt;startIndex.advancedBy(3)&lt;/code&gt;startIndex后面的第三个索引。  &lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;print(word[word.startIndex],
    word[word.endIndex.predecessor()],
    word[word.startIndex.successor()],
    word[word.startIndex.advancedBy(3)])
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;字符串characters属性的indices属性创建一个包含全部索引Range,用来在一个字符串中访问单个字符&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;for index in word.characters.indices{
    print(word[index])
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="4f72854e51ae690d3d28f8138e0b6fc7"&gt;插入和删除&lt;/h3&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;var s = &amp;quot;插入&amp;quot;
s.insert(&amp;quot;啊&amp;quot;, atIndex: s.endIndex)//插入单个字符
s.insertContentsOf(&amp;quot;字符串&amp;quot;.characters, at: s.endIndex)//插入字符串
s.removeAtIndex(s.startIndex)//移除单个
let range = s.endIndex.advancedBy(-2)..&amp;lt;s.endIndex//移除子串
s.removeRange(range)//清空字符串
print(s)
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id="469e0eee17a884bf97e500fdb0f02182"&gt;比较字符串&lt;/h3&gt;
&lt;p&gt;== 前缀/后缀相等&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;var a_ = &amp;quot;字符串1&amp;quot;,b = &amp;quot;字符串2&amp;quot;
print(a_ == b, a_.hasPrefix(&amp;quot;字符串&amp;quot;),b.hasSuffix(&amp;quot;2&amp;quot;))
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Swift"></category></entry><entry><title>Mac下自用的一些命令</title><link href="http://pdhero.com/bnote/mac-cmd-notes.html" rel="alternate"></link><updated>2015-10-28T11:12:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-10-28:bnote/mac-cmd-notes.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;整理下经常用到的一些命令。省得每次出问题以后都要重新搜索。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="d5135420e2dbee4c3f1a597639c5b2fa"&gt;link sublime to  Terminal&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;ln /opt/homebrew-cask/Caskroom/sublime-text/2.0.2/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl /usr/local/bin/sublime
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="4455189f9683c2cad36750be82483687"&gt;Xcode update Plugin invalid&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;find ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins -name Info.plist -maxdepth 3 | xargs -I{} defaults write {} DVTPlugInCompatibilityUUIDs -array-add `defaults read /Applications/Xcode.app/Contents/Info.plist DVTPlugInCompatibilityUUID`
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="cbce8f03f7f9f2a57353c9b53b04fa46"&gt;find file&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;find . -name &amp;quot;*.dmg&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="d3419d7429dbe1d67b1698fe0ab79457"&gt;class-dump&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;class-dump -H ~/Desktop/AppInstall -o ~/Desktop/app.h
&lt;/pre&gt;&lt;/div&gt;</summary><category term="CMD"></category></entry><entry><title>Flask笔记_01</title><link href="http://pdhero.com/bnote/Flask_notes_01.html" rel="alternate"></link><updated>2015-10-25T11:30:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-10-25:bnote/Flask_notes_01.html</id><summary type="html">&lt;p&gt;Flask学习笔记之Flask-Bootstrap Flask-Moment&lt;/p&gt;
&lt;h1 id="44b2ec7b98f5190b3617c573c39e7488"&gt;Flask-Bootstrap&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;pip install Flask-Bootstrap&lt;/code&gt; 默认安装的是最新版本。也可以在安装的时候自定义版本。&lt;/p&gt;
&lt;h2 id="44731d72f069d71202a56c99d85ffaa8"&gt;scripts styles&lt;/h2&gt;
&lt;p&gt;默认的CDN js和css 加载太慢。替换 js和css路径&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;{% block scripts %}
&amp;lt;script href=&amp;quot;{{ url_for(&amp;#39;static&amp;#39;, filename=&amp;#39;js/jquery.min.js&amp;#39;) }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script href=&amp;quot;{{ url_for(&amp;#39;static&amp;#39;, filename=&amp;#39;js/bootstrap.min.js&amp;#39;) }}&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
{% endblock %}

{% block styles %}
&amp;lt;link href=&amp;quot;{{ url_for(&amp;#39;static&amp;#39;, filename=&amp;#39;css/bootstrap.min.css&amp;#39;) }}&amp;quot; rel=&amp;quot;stylesheet&amp;quot;&amp;gt;
{% endblock %}
&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id="44979180eb6e24be5afe95fb0e7d7ce7"&gt;Flask-Moment&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;pip install Flask-Moment&lt;/code&gt;。用来本地化日期和时间&lt;/p&gt;
&lt;h2 id="4f01d410f43f695de63ccf8cd1600935"&gt;替换CDN js路径 设置默认地区&lt;/h2&gt;
&lt;p&gt;moment是依赖于&lt;code&gt;jquery&lt;/code&gt;的&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;{% block scripts %}
{{ moment.include_moment(local_js=&amp;#39;static/js/moment.js&amp;#39;) }}
&amp;lt;!--设置默认地区--&amp;gt;
{{ moment.lang(&amp;quot;zh-CN&amp;quot;)}}
{% endblock %}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="Bootstrap Moment"></category></entry><entry><title>HHKB Function Key With Karabiner</title><link href="http://pdhero.com/dlife/HHKB-Function-Key-With-Karabiner.html" rel="alternate"></link><updated>2015-09-14T10:37:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-09-14:dlife/HHKB-Function-Key-With-Karabiner.html</id><summary type="html">&lt;p&gt;Karabiner 给HHKB添加功能键F0~F12&lt;/p&gt;
&lt;h2 id="34c847b65e809d462fadf06a2488c1ab"&gt;Karabiner&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pqrs.org/osx/karabiner/"&gt;Karabiner&lt;/a&gt;这个键盘映射工具很强大。看了下&lt;code&gt;Change Key&lt;/code&gt;选项里,只有&lt;code&gt;Shift+Num&lt;/code&gt;和&lt;code&gt;Command+Num&lt;/code&gt;映射&lt;code&gt;Fn&lt;/code&gt;,&lt;code&gt;Shift&lt;/code&gt;和&lt;code&gt;Command&lt;/code&gt;组合数字快捷键平时经常用到,只能另辟蹊径了,这时候很容易想到&lt;code&gt;Option+Num&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="49b21ad0d38942f635877e7bbc5d7a1e"&gt;Solution&lt;/h2&gt;
&lt;p&gt;打开&lt;code&gt;Karabiner&lt;/code&gt;,选中&lt;code&gt;Change Key&lt;/code&gt;菜单,看到右下角有句话&lt;code&gt;Do you want to add your own settings?&lt;/code&gt;点击&lt;code&gt;Open the documentation web site&lt;/code&gt;跳转到 &lt;a href="https://pqrs.org/osx/karabiner/document.html#privatexml"&gt;How to add your own settings&lt;/a&gt;,有详情的教程告诉我们进行个性化设置。&lt;/p&gt;
&lt;h2 id="fa535ffb25e1fd20341652f9be21e06e"&gt;Config&lt;/h2&gt;
&lt;p&gt;贴下我的XML配置,只是左边的&lt;code&gt;Option+Num&lt;/code&gt;映射&lt;code&gt;Fn&lt;/code&gt;的,可以根据自己的需要进行修改。&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;root&amp;gt;
  &amp;lt;item&amp;gt;
    &amp;lt;name&amp;gt;option+num to Fn&amp;lt;/name&amp;gt;
    &amp;lt;identifier&amp;gt;private.swap_space_and_tab&amp;lt;/identifier&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::KEY_1, ModifierFlag::OPTION_L, KeyCode::F1&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::KEY_2, ModifierFlag::OPTION_L, KeyCode::F2&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::KEY_3, ModifierFlag::OPTION_L, KeyCode::F3&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::KEY_4, ModifierFlag::OPTION_L, KeyCode::F4&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::KEY_5, ModifierFlag::OPTION_L, KeyCode::F5&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::KEY_6, ModifierFlag::OPTION_L, KeyCode::F6&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::KEY_7, ModifierFlag::OPTION_L, KeyCode::F7&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::KEY_8, ModifierFlag::OPTION_L, KeyCode::F8&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::KEY_9, ModifierFlag::OPTION_L, KeyCode::F9&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::KEY_0, ModifierFlag::OPTION_L, KeyCode::F10&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::MINUS, ModifierFlag::OPTION_L, KeyCode::F11&amp;lt;/autogen&amp;gt;
    &amp;lt;autogen&amp;gt;__KeyToKey__ KeyCode::EQUAL, ModifierFlag::OPTION_L, KeyCode::F12&amp;lt;/autogen&amp;gt;
  &amp;lt;/item&amp;gt;

&amp;lt;/root&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id="e7384c252586cce857cb14709845a8a4"&gt;KeyCode.data&lt;/h2&gt;
&lt;p&gt;找对应的&lt;code&gt;KeyCode&lt;/code&gt;是件头疼的事,才开始慢慢试看到&lt;code&gt;Karabiner&lt;/code&gt;报错一点点修改,后来搜索了下才发现的有现成的可以看😹这智商真是捉急啊。附上KeyCode.data链接&lt;a href="https://github.com/tekezo/Karabiner/blob/master/src/bridge/generator/keycode/data/KeyCode.data"&gt;KeyCode.data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;总结下规律:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全部是大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KEY_num&lt;/code&gt; 表示数字,比如:KEY_0 =&amp;gt; 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;R&lt;/code&gt; 表示右边,&lt;code&gt;L&lt;/code&gt;表示左边,比如OPTION_R =&amp;gt; 左边的Option&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MINUS&lt;/code&gt;=&amp;gt;&lt;code&gt;-&lt;/code&gt;  &lt;code&gt;EQUAL&lt;/code&gt; =&amp;gt;&lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更全的就看&lt;a href="https://github.com/tekezo/Karabiner/blob/master/src/bridge/generator/keycode/data/KeyCode.data"&gt;KeyCode.data&lt;/a&gt;了&lt;/li&gt;
&lt;/ul&gt;</summary><category term="HHKB"></category><category term="Karabiner"></category></entry><entry><title>iOS notes</title><link href="http://pdhero.com/bnote/iOS-notes.html" rel="alternate"></link><updated>2015-08-29T14:58:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-08-29:bnote/iOS-notes.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;大部分来自&lt;a href="http://stackoverflow.com"&gt;stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用storyBoard的时候 &lt;code&gt;adding subview to UIImageView&lt;/code&gt;
拖一个&lt;code&gt;UIView&lt;/code&gt;把它的类型改为&lt;code&gt;UIImageView&lt;/code&gt;这时候就能在这个&lt;code&gt;View&lt;/code&gt;在添加子视图了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;像&lt;code&gt;tree&lt;/code&gt; 命令一样显示&lt;code&gt;view&lt;/code&gt;的层次结构。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;[self.view recursiveDescription]
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tableView&lt;/code&gt;滚动的时候始终以&lt;code&gt;row&lt;/code&gt;的高度为单位。
首先想到的是&lt;code&gt;tableView&lt;/code&gt;继承自&lt;code&gt;scrollView&lt;/code&gt;也有&lt;code&gt;pagingEnabled&lt;/code&gt;属性。
设置这个属性之后会发现,滚动的时候是以&lt;code&gt;tableView&lt;/code&gt;的&lt;code&gt;height&lt;/code&gt;为单位滚的。
实现以下这个代理方法就可以解决了,滚动结束的时候始终停留在某个&lt;code&gt;row&lt;/code&gt;上面并且还能够获得&lt;code&gt;indexPath&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;-(void)scrollViewWillEndDragging:(UIScrollView*)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(inout CGPoint*)targetContentOffset {

    // Get index path for target row
    NSIndexPath* indexPath = [self.tableView indexPathForRowAtPoint:(*targetContentOffset)];

    // Set new target
    (*targetContentOffset) = [self.tableView rectForRowAtIndexPath:indexPath].origin;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;去掉tableView多余的行
  之前一直根据行数来设置tableView的高度😂其实不用这么麻烦&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;self.tableView.tableFooterView = [UIView alloc] init];&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击self.view 键盘收起&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;- (void) touchesBegan:(NSSet&amp;lt;UITouch *&amp;gt; *)touches withEvent:(UIEvent *)event{
    [_searchBar endEditing:YES];
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其实还有一个神器&lt;a href="https://github.com/hackiftekhar/IQKeyboardManager"&gt;IQKeyboardManager&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更改UI控件系统默认样式&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;//黑色改白色 不要忘记设置plist
[[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent];
//导航条颜色
[[UINavigationBar appearance] setBarTintColor:[UIColor whiteColor]];
//title的颜色和字体
[[UINavigationBar appearance] setTitleTextAttributes:@{NSForegroundColorAttributeName:[UIColor whiteColor], NSFontAttributeName:[UIFont systemFontOfSize:14.0f]}];
//透明or不透明。这个会影响storyBoard纵坐标的位置。注意这个方法与`SetbackgroundImageForBarMetrics`一起使用时导航的变化。
[[UINavigationBar appearance] setTranslucent:NO];
//serarchBar的颜色,比如说取消按钮。再也不会遍历子视图了。
[[UISearchBar appearance] setTintColor:[UIColor whiteColor]];
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;每个控件的&lt;code&gt;appearance&lt;/code&gt;都可以去看下。有时候能省很多事。不用一个个的单独设置。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tableView上下拉刷新崩溃
上下刷新频繁操作时数组很容易越界。之前为了解决这个问一直很头大。判断上拉没结束不让下拉，越界的时候刷新tableView之类的。偶尔一次把&lt;code&gt;tableView reload&lt;/code&gt;写在了结束刷上下拉刷新方法之前,竟然不崩溃。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;tableView数据源变化之后尽可能早的刷新tableView,这样数组越界的可能性就会降低很多。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Xcode&lt;/code&gt;archive之后上传报错&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ERROR ITMS-90207: "Invalid Bundle. The bundle at 'example.app' does not contain a bundle executable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;vi&lt;/code&gt;打开&lt;code&gt;Info.plist&lt;/code&gt;检查有没有特殊字符。有时候从别的地方复制过来的会有特殊字符，删掉重新添加再打包就可以上传了。&lt;/p&gt;</summary><category term="iOS"></category></entry><entry><title>我的常用Mac App</title><link href="http://pdhero.com/bnote/%E6%88%91%E7%9A%84mac%E5%B8%B8%E7%94%A8app.html" rel="alternate"></link><updated>2015-08-25T20:22:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-08-25:bnote/我的mac常用app.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;8月貌似一篇博客没写。记录下我用一的一些Mac app。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Alfred 2&lt;/p&gt;
&lt;p&gt;1Password&lt;/p&gt;
&lt;p&gt;Dash&lt;/p&gt;
&lt;p&gt;Evernote&lt;/p&gt;
&lt;p&gt;WizNote&lt;/p&gt;
&lt;p&gt;Mou&lt;/p&gt;
&lt;p&gt;PDF Export&lt;/p&gt;
&lt;p&gt;Monosnap&lt;/p&gt;
&lt;p&gt;SourceTree&lt;/p&gt;
&lt;p&gt;Sublime&lt;/p&gt;
&lt;p&gt;Paw&lt;/p&gt;
&lt;p&gt;Fantastical&lt;/p&gt;
&lt;p&gt;Pasteasy&lt;/p&gt;
&lt;p&gt;Sketch&lt;/p&gt;
&lt;p&gt;Wireshark&lt;/p&gt;
&lt;p&gt;sqlitebrowser&lt;/p&gt;</summary><category term="Mac"></category></entry><entry><title>Cannot generate iOS App archive in xcode</title><link href="http://pdhero.com/bnote/Cannot-generate-iOS-App-archive-in-Xcode.html" rel="alternate"></link><updated>2015-07-29T10:06:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-07-29:bnote/Cannot-generate-iOS-App-archive-in-Xcode.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;Cannot generate iOS App archive in xcode&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="e678f2cc8303d18a894f8be0f9588fe7"&gt;Xcode archive&lt;/h4&gt;
&lt;p&gt;Xcode 打包的时候一直生成&lt;code&gt;Other Item&lt;/code&gt;不生成&lt;code&gt;iOS App&lt;/code&gt;
&lt;img alt="Cannot generate iOS App archive in xcode" src="http://7xixt5.com1.z0.glb.clouddn.com/Cannot-generate-iOS-App-archive-in-xcode.png" /&gt;
折腾了几个小时,&lt;code&gt;stackoverflow&lt;/code&gt;也有人提问&lt;a href="http://stackoverflow.com/questions/10715211/cannot-generate-ios-app-archive-in-xcode"&gt;Cannot generate iOS App archive in xcode&lt;/a&gt;.&lt;code&gt;Build Settings&lt;/code&gt;配置也是一样的,就是无法生成&lt;code&gt;ipa&lt;/code&gt;,最后就差重新安装&lt;code&gt;Xcode&lt;/code&gt;了&lt;/p&gt;
&lt;h4 id="957a228f87aaf86e436762129485625a"&gt;解决方法&lt;/h4&gt;
&lt;p&gt;项目是用&lt;code&gt;pod&lt;/code&gt;管理的,操作&lt;code&gt;pod&lt;/code&gt;的过程中发现有更新提示.
&lt;code&gt;sudo gem install cocoapods&lt;/code&gt;更新了下&lt;code&gt;pod&lt;/code&gt;,重新打包竟然OK了。在这里记录一下。&lt;/p&gt;</summary><category term="archive"></category></entry><entry><title>生产力工具</title><link href="http://pdhero.com/dlife/poker2_mstand.html" rel="alternate"></link><updated>2015-07-05T14:30:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-07-05:dlife/poker2_mstand.html</id><summary type="html">&lt;p&gt;晒晒我的装备&lt;/p&gt;
&lt;p&gt;&lt;img alt="poker2" src="http://7xixt5.com1.z0.glb.clouddn.com/poker2.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="mStand" src="http://7xixt5.com1.z0.glb.clouddn.com/mStand.png" /&gt;&lt;/p&gt;
&lt;p&gt;还是用回HHKB吧,两个键盘之间切换实在适应不了。⌨拍照技术太差了😂
&lt;img alt="HHKB" src="http://7xixt5.com1.z0.glb.clouddn.com/hhkb.png" /&gt;&lt;/p&gt;
&lt;p&gt;期待了好久的彩色键帽
&lt;img alt="color_hhkb" src="http://7xixt5.com1.z0.glb.clouddn.com/color_hhkb.png" /&gt;&lt;/p&gt;</summary><category term="poker2"></category><category term="HHKB"></category></entry><entry><title>Xcode7免证书真机调试</title><link href="http://pdhero.com/acode/Xcode7%E5%85%8D%E8%AF%81%E4%B9%A6%E7%9C%9F%E6%9C%BA%E8%B0%83%E8%AF%95.html" rel="alternate"></link><updated>2015-06-09T19:24:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-06-09:acode/Xcode7免证书真机调试.html</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;The application does not contain a valid application-identifier entitlement.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="8e20c0c5e9332a426196dc0e8bce212a"&gt;WWDC2015&lt;/h4&gt;
&lt;p&gt;这次的WWDC对开发者意义最大的要数&lt;code&gt;Swift2.0&lt;/code&gt;年底开源,重点支持 OS X、iOS和Linux三个平台,期待&lt;code&gt;Swift&lt;/code&gt;的表现。另一件事就是证书三合一了,&lt;code&gt;iOS&lt;/code&gt; &lt;code&gt;Mac&lt;/code&gt; &lt;code&gt;Safari Extensions&lt;/code&gt;证书的三合了,给开发者省了不少钱。&lt;/p&gt;
&lt;h4 id="a233f06910fc7ea15b4be4e98af53e80"&gt;Xcode7真机调试&lt;/h4&gt;
&lt;p&gt;登陆非开发者的appID,可以看到iOS Mac都是&lt;code&gt;Free&lt;/code&gt;
&lt;img alt="appid" src="http://7xixt5.com1.z0.glb.clouddn.com/appId.png" /&gt;&lt;/p&gt;
&lt;p&gt;点进详情查看,和以前一样有与&lt;code&gt;BundleID&lt;/code&gt;对应的描述文件还有Develop证书。
&lt;img alt="appID_detail" src="http://7xixt5.com1.z0.glb.clouddn.com/appID_detail.png" /&gt;
可以看到没有&lt;code&gt;Distribution&lt;/code&gt;描述文件和证书,所以是没办法直接&lt;code&gt;Archive&lt;/code&gt;导出&lt;code&gt;ipa&lt;/code&gt;的。&lt;/p&gt;
&lt;h4 id="9e318b9dbc478c973c3319552b39aaec"&gt;keyChain&lt;/h4&gt;
&lt;p&gt;其实&lt;code&gt;Xcode7&lt;/code&gt;也不是免证书调试.苹果自动在钥匙串中生成了证书.进钥匙串可以看到证书的相关信息。
&lt;img alt="img" src="http://7xixt5.com1.z0.glb.clouddn.com/Xcode7_keyChain.png" /&gt;&lt;/p&gt;
&lt;h4 id="580a439681eee1ad580356d77a8ed5e6"&gt;真机调试报错&lt;/h4&gt;
&lt;p&gt;真机调试报错一般情况下点击弹出的&lt;code&gt;Fix&lt;/code&gt;,Xcode基本都可以解决.
当提示安装失败
&lt;code&gt;The application does not contain a valid application-identifier entitlement.&lt;/code&gt;,是因为一样的&lt;code&gt;BundleID&lt;/code&gt;之前用99的证书调试过,证书信息不一致无法安装,卸载程序重新运行就可以调试了。&lt;/p&gt;</summary><category term="Xcode7"></category></entry><entry><title>framework not found Metal armv7/s</title><link href="http://pdhero.com/acode/link-frameworks-automatically-fix-framework-not-found-metal-for-architecture-armv7.html" rel="alternate"></link><updated>2015-06-08T09:50:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-06-08:acode/link-frameworks-automatically-fix-framework-not-found-metal-for-architecture-armv7.html</id><summary type="html">&lt;p&gt;framework not found Metal for architecture armv7&lt;/p&gt;
&lt;h4 id="b5d1f808293deb9322b5b96519730ac2"&gt;The scene&lt;/h4&gt;
&lt;p&gt;以下条件Xcode才会报这个错误: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;build target&lt;/code&gt;是真机不是模拟器&lt;/li&gt;
&lt;li&gt;&lt;code&gt;other link flags&lt;/code&gt; 添加了 &lt;code&gt;-ObjC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;静态库是用&lt;code&gt;8.0&lt;/code&gt;以上的的SDK打包,使用的时候Xcode的&lt;code&gt;iPhone SDK&lt;/code&gt;小于&lt;code&gt;8.0&lt;/code&gt;,换句话说就是Xcode6打包的静态库用Xcode5来运行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="8b87f3464a8057b84f5b012bdf867cbe"&gt;The Reason&lt;/h4&gt;
&lt;p&gt;其实这是苹果的一个bug.没有对&lt;code&gt;no-Metal&lt;/code&gt;的设备即&lt;code&gt;armv7&amp;amp;armv7s&lt;/code&gt;做向后兼容
&lt;code&gt;CoreVideo.h&lt;/code&gt;可以看出来这点:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;#if COREVIDEO_SUPPORTS_METAL
#include &amp;lt;CoreVideo/CVMetalTexture.h&amp;gt;
#include &amp;lt;CoreVideo/CVMetalTextureCache.h&amp;gt;
#endif
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;COREVIDEO_SUPPORTS_METAL&lt;/code&gt;是这样定义的:&lt;code&gt;#if TARGET_OS_IPHONE&lt;/code&gt;,这是不够的,因为&lt;code&gt;armv7/s&lt;/code&gt;设备不支持&lt;code&gt;Metal&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="10eb951159a4b6a485744e900a86dff5"&gt;Link Frameworks Automatically&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;XCode5&lt;/code&gt;苹果引进了新&lt;code&gt;links&lt;/code&gt;flags,&lt;code&gt;Link Frames Automatically&lt;/code&gt;,&lt;code&gt;Defalut&lt;/code&gt;值是&lt;code&gt;YES&lt;/code&gt;.目的为了减少开发者添加&lt;code&gt;framework&lt;/code&gt;的工作量.在引入这个之前开发者使用&lt;code&gt;framework&lt;/code&gt;必须&lt;code&gt;link&lt;/code&gt;到工程。这个&lt;code&gt;flag&lt;/code&gt;让开发者们更简单的使用&lt;code&gt;framework&lt;/code&gt;.
对报错的&lt;code&gt;framework&lt;/code&gt;执行以下命令:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;otool -arch armv7 –l Xxxxx.framework/Xxxxx&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到以下内容:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;Load command 14
cmd LC_LINKER_OPTION
cmdsize 32
count 2
string #1 -framework
string #2 OpenGLES
Load command 15

cmd LC_LINKER_OPTION
cmdsize 32
count 2
string #1 -framework
string #2 Metal
Load command 16
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;正如你所看到的,这将导致&lt;code&gt;linker&lt;/code&gt;隐式使用&lt;code&gt;Metal&lt;/code&gt;&lt;/p&gt;
&lt;h4 id="34e74b1c7f4aad91715567cf698912f6"&gt;The Solution&lt;/h4&gt;
&lt;p&gt;在苹果没解决这个问题之前。可以通过以下两种方法来避免编译错误:&lt;/p&gt;
&lt;p&gt;1&amp;gt;. 直接用Xcode5来生成&lt;code&gt;lib&lt;/code&gt;和&lt;code&gt;framework&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2&amp;gt;. Xcode6 &lt;code&gt;Build Setting&lt;/code&gt;--&amp;gt;&lt;code&gt;Link Frameworks Automatically&lt;/code&gt;设置为NO,设置这个之后,Xcode 可能会报更多的错误,因为现在不会自动&lt;code&gt;link&lt;/code&gt;框架了,根据报错添加对应的&lt;code&gt;framework&lt;/code&gt;即可.&lt;/p&gt;
&lt;h3 id="5da618e8e4b89c66fe86e32cdafde142"&gt;From&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.appsee.com/blog/dev/xcode-new-link-frameworks-automatically-fix-framework-not-found-metal-for-architecture-armv7"&gt;framework not found Metal for architecture armv7&lt;/a&gt;&lt;/p&gt;</summary><category term="Metal armv7"></category></entry><entry><title>利用JS将safari"真正"的全屏</title><link href="http://pdhero.com/bnote/%E5%B0%86safari%E7%9C%9F%E6%AD%A3%E7%9A%84%E5%85%A8%E5%B1%8F.html" rel="alternate"></link><updated>2015-05-01T08:05:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-05-01:bnote/将safari真正的全屏.html</id><summary type="html">&lt;h4 id="265aa33d028a9960e0e3a5d6f0064e4b"&gt;整理自V2&lt;/h4&gt;
&lt;p&gt;将safari"真正"的全屏 
&lt;a href="https://www.v2ex.com/t/151466"&gt;全屏&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="afe367e404261db2377de6e0e70c75a0"&gt;safrai最大化&lt;/h4&gt;
&lt;p&gt;tab和标题栏照样是显示，对屏幕小的MBP来说还是占不小位置的 &lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="http://7xixt5.com1.z0.glb.clouddn.com/safari_full_screen.png" /&gt;&lt;/p&gt;
&lt;h4 id="7bb08620c50719bc7355faa4a772b880"&gt;加了JS之后全屏的Google&lt;/h4&gt;
&lt;p&gt;&lt;img alt="img" src="http://7xixt5.com1.z0.glb.clouddn.com/google_full_screen.png" /&gt;&lt;/p&gt;
&lt;h4 id="96641bf3534344897ca84bc9a951a953"&gt;bSetp&lt;/h4&gt;
&lt;h5 id="58abb73e0878d5ffb16628a31361f0a7"&gt;将以下JS代码将入书签收藏&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;javascript:document.documentElement.webkitRequestFullScreen()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="img" src="http://7xixt5.com1.z0.glb.clouddn.com/js_code.png" /&gt;&lt;/p&gt;
&lt;h5 id="fb30106bebc04358dc5529a83d03f0f5"&gt;快捷全屏(⌘+1)&lt;/h5&gt;
&lt;p&gt;蹭蹭蹭!!!!全屏了,真的全屏了,B格瞬间提升!Esc可退出全屏。确实，这货在展示的时候特别好用。&lt;/p&gt;
&lt;h4 id="251d27be2768a6479ff9111296fc4223"&gt;V2真是个神奇的地方&lt;/h4&gt;
&lt;p&gt;创业老板和公司元老的撕B大战,从来没有这么热闹过,眼睛真累,mgpyh&lt;br /&gt;
0_o 关键字会不会到这里来勒,五一快乐&lt;br /&gt;
Mou还不打算更新么,ctrl+s一下就转几圈菊花。。&lt;/p&gt;</summary><category term="safari全屏"></category></entry><entry><title>思客sketch_day01</title><link href="http://pdhero.com/edesign/sketch_01.html" rel="alternate"></link><updated>2015-01-10T23:10:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-01-10:edesign/sketch_01.html</id><summary type="html">&lt;p&gt;思客抱团学习sketch&lt;/p&gt;
&lt;h3 id="eb8fb008f8af47db48b10936b671611f"&gt;&lt;a href="http://medialoot.com/blog/how-to-create-a-website-header-design-using-bohemian-coding-sketch/"&gt;主页头条设计&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="img" src="http://7xixt5.com1.z0.glb.clouddn.com/starer_sketch01.png" /&gt;&lt;/p&gt;
&lt;h3 id="b3c3ad9d7d738a6b0eb767186a4cc4ef"&gt;&lt;a href="http://webdesign.tutsplus.com/tutorials/sketch-for-beginners-design-a-login-form-interface--cms-21534"&gt;登陆页面设计&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img alt="img" src="http://7xixt5.com1.z0.glb.clouddn.com/starer_sketch01_login.png" /&gt;&lt;/p&gt;
&lt;h3 id="952d012fcbf9d533dab2eae0ca3ca41f"&gt;技巧&lt;/h3&gt;
&lt;p&gt;按住 &lt;code&gt;command&lt;/code&gt;键同时选中多个图形，可以统一设置它们的属性，这个和&lt;code&gt;storyBoard&lt;/code&gt;的
&lt;code&gt;Autolayout&lt;/code&gt;很像，要是像 &lt;code&gt;storyBoard&lt;/code&gt; 一样能设置间距就好了。&lt;/p&gt;
&lt;p&gt;按住 &lt;code&gt;option (⌥)&lt;/code&gt;键可以看到选中的&lt;code&gt;shape&lt;/code&gt;与其他上下左右&lt;code&gt;shape&lt;/code&gt;的距离&lt;/p&gt;</summary></entry><entry><title>iOS简单实用category</title><link href="http://pdhero.com/acode/iOS%E7%AE%80%E5%8D%95%E5%AE%9E%E7%94%A8category.html" rel="alternate"></link><updated>2015-01-10T09:53:00+08:00</updated><author><name>pdx</name></author><id>tag:pdhero.com,2015-01-10:acode/iOS简单实用category.html</id><summary type="html">&lt;p&gt;常用第三方category,持续更新中...&lt;/p&gt;
&lt;h4 id="8307527e88ce2fc30a8e9a9e3f85040d"&gt;&lt;a href="https://github.com/nicklockwood/AutoCoding"&gt;AutoCoding&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;AutoCoding is a category on NSObject that provides automatic support for NSCoding to any object. &lt;/p&gt;
&lt;h4 id="8a5a4d77fb514b4048ae7fdf46cdd6bc"&gt;&lt;a href="https://github.com/zwaldowski/BlocksKit"&gt;BlocksKit&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Blocks in C and Objective-C are downright magical. They make coding easier and potentially quicker, not to mention faster on the front end with multithreading and Grand Central Dispatch. BlocksKit hopes to facilitate this kind of programming by removing some of the annoying - and, in some cases, impeding - limits on coding with blocks.&lt;/p&gt;
&lt;h3 id="02eaebc8a33e00488c45df2fcf852d90"&gt;UIView&lt;/h3&gt;
&lt;h4 id="31b206a4a17cd2661a390239e4ae9dd6"&gt;&lt;a href="https://github.com/freak4pc/UIView-Positioning"&gt;UIView-Positioning&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;UIView+Positioning is an Objective-C Category which provides easy shorthand methods to defining the frame properties (width, height, x, y) of any UIView based object in an easy fashion, as well as extra helpful properties and methods&lt;/p&gt;
&lt;h4 id="ea6ae8445ac08b76cda2ab9980caa0a7"&gt;&lt;a href="https://github.com/jonasschnelli/UIView-i7Rotate360"&gt;UIView-i7Rotate360&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;This UIView Categorie (Extend) will allow you to rotate a view easly 360°&lt;/p&gt;
&lt;h4 id="01de08fcc4a577d10caaae8a505ac7f9"&gt;&lt;a href="https://github.com/yfme/UIImageView-PlayGIF"&gt;UIImageView-PlayGIF&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;UIImageView category/subclass for playing GIF. Simple, high performance, low memory footprint.&lt;/p&gt;
&lt;h4 id="650b524af37b673e05d15602689581ca"&gt;&lt;a href="https://github.com/andreamazz/UITextField-Shake"&gt;UITextField-Shake&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;UITextField category that adds a shake animation like the password field of the OsX login screen.&lt;/p&gt;</summary><category term="category"></category></entry></feed>